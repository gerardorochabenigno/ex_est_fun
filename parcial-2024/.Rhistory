locations = cells_body()) |>
cols_align(align = "center",
columns = everything()) |>
cols_width(everything() ~ px(150)) |>
tab_options(table.width = pct(100),
table.font.size = px(14))
zol2 <- read_csv("./datos/zolmitriptan.csv", show_col_types = FALSE)
theta <- zol2 |>
summarize(mu_auc = sum(AUC)/n(),
mu_cmax = sum(CMAX)/n(),
mu_tmax = sum(TMAX)/n(),
.by = Formulation) |>
pivot_wider(names_from = "Formulation", values_from = c("mu_auc", "mu_cmax", "mu_tmax")) |>
mutate(theta_auc = mu_auc_T/mu_auc_R,
theta_cmax = mu_cmax_T/mu_cmax_R,
theta_tmax = mu_tmax_T/mu_tmax_R)
sprintf("Estimador plug-in de AUC (Área bajo la curva): %1.3f", theta$theta_auc)
sprintf("Estimador plug-in de CMAX (Concentración máxima): %1.3f", theta$theta_cmax)
sprintf("Estimador plug-in de TMAX (Tiempo en que se alcanzó la máxima concentración): %1.3f", theta$theta_tmax)
set.seed(123)
dist_boot <- map_df(1:5000,
~slice_sample(zol2, prop = 1, replace = TRUE, by = Formulation) |>
summarize(mu_auc = sum(AUC)/n(),
mu_cmax = sum(CMAX)/n(),
mu_tmax = sum(TMAX)/n(),
.by = Formulation) |>
pivot_wider(names_from = "Formulation", values_from = c("mu_auc", "mu_cmax", "mu_tmax")) |>
mutate(theta_auc = mu_auc_T/mu_auc_R,
theta_cmax = mu_cmax_T/mu_cmax_R,
theta_tmax = mu_tmax_T/mu_tmax_R) |>
select(theta_auc, theta_cmax, theta_tmax) |>
mutate(iter=.x)
)
library(patchwork)
dist_boot_auc  <- ggplot(dist_boot, aes(x=theta_auc)) + geom_histogram(bins = 50)  + labs(title="Dist. bootstrap de estimador de razón de AUC", x = "Estimador de razón - AUC", y = "Conteo")
dist_boot_cmax <- ggplot(dist_boot, aes(x=theta_cmax)) + geom_histogram(bins = 50) + labs(title="Dist. bootstrap de estimador de razón de CMAX", x = "Estimador de razón - CMAX", y = "Conteo")
dist_boot_tmax <- ggplot(dist_boot, aes(x=theta_tmax)) + geom_histogram(bins = 50) + labs(title="Dist. bootstrap de estimador de razón de TMAX", x = "Estimador de razón - TMAX", y = "Conteo")
qq_auc <- ggplot(dist_boot, aes(sample=theta_auc))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de AUC", y="Dist. Empírica", x="Dist. Teórica")
qq_cmax <- ggplot(dist_boot, aes(sample=theta_cmax))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de CMAX", y="Dist. Empírica", x="Dist. Teórica")
qq_tmax <- ggplot(dist_boot, aes(sample=theta_cmax))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de TMAX", y="Dist. Empírica", x="Dist. Teórica")
(dist_boot_auc + dist_boot_cmax + dist_boot_tmax) / (qq_auc + qq_cmax +qq_tmax)
# AUC
print("----AUC")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de AUC usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_auc, probs = c(0.05))),
unname(quantile(dist_boot$theta_auc, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de AUC el método normal: (%1.5f , %1.5f)",
theta$theta_auc - 1.645*sd(dist_boot$theta_auc),
theta$theta_auc + 1.645*sd(dist_boot$theta_auc)
)
print("El intervalo de confianza bootstrap del estimador de razón de AUC se encuentra dentro de los requerimientos de la FDA")
print("----CMAX")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de CMAX usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_cmax, probs = c(0.05))),
unname(quantile(dist_boot$theta_cmax, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de CMAX el método normal: (%1.5f , %1.5f)",
theta$theta_cmax - 1.645*sd(dist_boot$theta_cmax),
theta$theta_cmax + 1.645*sd(dist_boot$theta_cmax)
)
print("El intervalo de confianza bootstrap del estimador de razón de CMAX se encuentra dentro de los requerimientos de la FDA")
print("----TMAX")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de TMAX usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_tmax, probs = c(0.05))),
unname(quantile(dist_boot$theta_tmax, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de TMAX el método normal: (%1.5f , %1.5f)",
theta$theta_tmax - 1.645*sd(dist_boot$theta_tmax),
theta$theta_tmax + 1.645*sd(dist_boot$theta_tmax)
)
print("El intervalo de confianza bootstrap del estimador de razón de TMAX se encuentra dentro de los requerimientos de la FDA")
library(srvyr)
set.seed(123)
dic_endutih <- read_csv("./datos/endutih/diccionario_de_datos_tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
tr_endutih <- read_csv("./datos/endutih/tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
# Transformamos tibble a tbl_svy
endutih_design <- tr_endutih |>
select(UPM, FAC_HOG, EST_DIS, P4_4, P4_1_6, P5_5, ENT) |>
mutate(con_internet = if_else(P4_4==1,1,0),
con_movil    = if_else(P4_1_6==1,1,0),
con_fijo     = if_else(P5_5==1,1,0)) |>
select(UPM, FAC_HOG, EST_DIS, ENT, con_internet, con_movil, con_fijo) |>
as_survey_design(ids = UPM, weights = FAC_HOG, strata = EST_DIS)
# Calculamos el error muestral bootstrap
endutih_boot <- endutih_design %>%
as_survey_rep(type = "subbootstrap", replicates = 500)
# Intervalo de confianza
metricas <- endutih_boot %>%
srvyr::summarise(prop_internet = survey_mean(con_internet),
prop_movil    = survey_mean(con_movil),
prop_fijo    = survey_mean(con_fijo))
sprintf("Estimador puntual de la proporción de hogares con acceso a internet: %1.5f", metricas$prop_internet)
sprintf("Estimador puntual de la proporción de hogares con teléfono fijo: %1.5f", metricas$prop_fijo)
sprintf("Estimador puntual de la proporción de hogares con teléfono móvil: %1.5f", metricas$prop_movil)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con acceso a internet: (%1.5f, %1.5f)",
metricas$prop_internet-2*metricas$prop_internet_se,
metricas$prop_internet+2*metricas$prop_internet_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono fijo: (%1.5f, %1.5f)",
metricas$prop_fijo-2*metricas$prop_fijo_se,
metricas$prop_fijo+2*metricas$prop_fijo_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono móvil: (%1.5f, %1.5f)",
metricas$prop_movil-2*metricas$prop_movil_se,
metricas$prop_movil+2*metricas$prop_movil_se)
estado_internet <- endutih_boot %>%
group_by(ENT) %>%
srvyr::summarise(prop_internet = survey_mean(con_internet)) |>
mutate(inf = prop_internet - 2* prop_internet_se,
sup = prop_internet + 2* prop_internet_se)
estados <- read_delim("./datos/estados.txt", show_col_types = FALSE)
estado_internet_2 <- left_join(estado_internet, estados, by="ENT") |>select(nombre, inf, sup, prop_internet)
ggplot(estado_internet_2, aes(x = prop_internet, y = factor(nombre, levels = sort(nombre)), xmax = sup, xmin = inf)) +
geom_point(colour = "firebrick") +
geom_linerange() +
geom_hline(yintercept = 0, colour = "gray") +
labs(title="Proporción de hogares en cada estado con acceso a internet",
x="Proporción de hogares con acceso a internet",
y="Estado")
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
#graficar la distribucion original y conmparara ambos tipos
ascorbate <- read_csv("datos/ascorbate.csv")
ascorbate_log_long <- ascorbate %>%
mutate(
stomach_log = log(stomach),
breast_log = log(breast)
) %>%
select(stomach_log, breast_log) %>%
pivot_longer(cols = everything(), names_to = "type", values_to = "survival") %>%
na.omit()
ggplot(ascorbate_log_long, aes(x = type, y = survival)) +
coord_flip() +
geom_boxplot() +
theme_minimal()
set.seed(123)
perms_type <- lineup(null_permute("type"), ascorbate_log_long, n = 20)
ggplot(perms_type, aes(x = type, y = survival)) +
coord_flip() +
geom_boxplot() +
facet_wrap(~ .sample, ncol=5) +
scale_y_continuous(breaks = c(3, 5, 7))  +
theme_minimal()
dif_obs <- ascorbate_log_long %>%
group_by(type) %>%
summarise(prom=mean(survival), .groups = 'drop' ) %>%
pivot_wider(names_from = type, values_from = prom) %>%
mutate(diferencia_prom = breast_log - stomach_log) %>%
pull(diferencia_prom) %>%
round(3)
perms_survival <- lineup(null_permute("survival"),
ascorbate_log_long, n = 5000)
glimpse(perms_survival)
valores_ref <- perms_survival %>%
group_by(.sample, type) %>%
summarise(prom=mean(survival), .groups = 'drop') %>%
pivot_wider(names_from = type, values_from = prom) %>%
mutate(diferencia = breast_log - stomach_log)
glimpse(valores_ref)
# Función de distribución acumulada (inverso de función de cuantiles)
dist_perm <- ecdf(valores_ref$diferencia)
# Calculamos el percentil del valor observado
percentil_obs <- dist_perm(dif_obs)
percentil_obs
g_1 <- ggplot(valores_ref, aes(sample = diferencia)) + geom_qq(distribution = stats::qunif)  +
xlab("f") + ylab("diferencia") + labs(subtitle = "Distribución nula o de referencia") +
geom_hline(yintercept = dif_obs, colour = "red") +
annotate("text", x = 0.18, y = dif_obs + 0.13, label = "diferencia observada", colour = "red")
g_2 <- ggplot(valores_ref, aes(x = diferencia)) + geom_histogram(binwidth = 0.28) +
coord_flip() + xlab("") + labs(subtitle = " ") +
geom_vline(xintercept = dif_obs, colour = "red") +
annotate("text", x = dif_obs, y = 385, label = percentil_obs,vjust = -0.2, colour = "red")
g_1 + g_2
valor_p = 1 - percentil_obs
valor_p
valor_p_dos_colas = 2 * min(dist_perm(dif_obs), (1 - dist_perm(dif_obs)))
valor_p_dos_colas
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
#graficar la distribucion original y conmparara ambos tipos
ascorbate <- read_csv("datos/ascorbate.csv")
ascorbate_log_long <- ascorbate %>%
mutate(
stomach_log = log(stomach),
breast_log = log(breast)
) %>%
select(stomach_log, breast_log) %>%
pivot_longer(cols = everything(), names_to = "type", values_to = "survival") %>%
na.omit()
ggplot(ascorbate_log_long, aes(x = type, y = survival)) +
coord_flip() +
geom_boxplot() +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
valor_p = 1 - percentil_obs
valor_p
valor_p_dos_colas = 2 * min(dist_perm(dif_obs), (1 - dist_perm(dif_obs)))
valor_p_dos_colas
# Función de distribución acumulada (inverso de función de cuantiles)
dist_perm <- ecdf(valores_ref$diferencia)
# Calculamos el percentil del valor observado
percentil_obs <- dist_perm(dif_obs)
percentil_obs
g_1 <- ggplot(valores_ref, aes(sample = diferencia)) + geom_qq(distribution = stats::qunif)  +
xlab("f") + ylab("diferencia") + labs(subtitle = "Distribución nula o de referencia") +
geom_hline(yintercept = dif_obs, colour = "red") +
annotate("text", x = 0.18, y = dif_obs + 0.13, label = "diferencia observada", colour = "red")
g_2 <- ggplot(valores_ref, aes(x = diferencia)) + geom_histogram(binwidth = 0.28) +
coord_flip() + xlab("") + labs(subtitle = " ") +
geom_vline(xintercept = dif_obs, colour = "red") +
annotate("text", x = dif_obs, y = 385, label = percentil_obs,vjust = -0.2, colour = "red")
g_1 + g_2
# Función de distribución acumulada (inverso de función de cuantiles)
dist_perm <- ecdf(valores_ref$diferencia)
# Calculamos el percentil del valor observado
percentil_obs <- dist_perm(dif_obs)
percentil_obs
g_1 <- ggplot(valores_ref, aes(sample = diferencia)) + geom_qq(distribution = stats::qunif)  +
xlab("f") + ylab("diferencia") + labs(subtitle = "Distribución nula o de referencia") +
geom_hline(yintercept = dif_obs, colour = "red") +
annotate("text", x = 0.18, y = dif_obs + 0.13, label = "diferencia observada", colour = "red")
g_2 <- ggplot(valores_ref, aes(x = diferencia)) + geom_histogram(binwidth = 0.28) +
coord_flip() + xlab("") + labs(subtitle = " ") +
geom_vline(xintercept = dif_obs, colour = "red") +
annotate("text", x = dif_obs, y = 385, label = percentil_obs,vjust = -0.2, colour = "red")
g_1 + g_2
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(readr)
library(patchwork)
library(lineup)
library(nullabor)
library(gt)
library(srvyr)
#graficar la distribucion original y conmparara ambos tipos
ascorbate <- read_csv("datos/ascorbate.csv")
ascorbate_log_long <- ascorbate %>%
mutate(
stomach_log = log(stomach),
breast_log = log(breast)
) %>%
select(stomach_log, breast_log) %>%
pivot_longer(cols = everything(), names_to = "type", values_to = "survival") %>%
na.omit()
ggplot(ascorbate_log_long, aes(x = type, y = survival)) +
coord_flip() +
geom_boxplot() +
theme_minimal()
set.seed(123)
perms_type <- lineup(null_permute("type"), ascorbate_log_long, n = 20)
ggplot(perms_type, aes(x = type, y = survival)) +
coord_flip() +
geom_boxplot() +
facet_wrap(~ .sample, ncol=5) +
scale_y_continuous(breaks = c(3, 5, 7))  +
theme_minimal()
dif_obs <- ascorbate_log_long %>%
group_by(type) %>%
summarise(prom=mean(survival), .groups = 'drop' ) %>%
pivot_wider(names_from = type, values_from = prom) %>%
mutate(diferencia_prom = breast_log - stomach_log) %>%
pull(diferencia_prom) %>%
round(3)
perms_survival <- lineup(null_permute("survival"),
ascorbate_log_long, n = 5000)
glimpse(perms_survival)
valores_ref <- perms_survival %>%
group_by(.sample, type) %>%
summarise(prom=mean(survival), .groups = 'drop') %>%
pivot_wider(names_from = type, values_from = prom) %>%
mutate(diferencia = breast_log - stomach_log)
glimpse(valores_ref)
# Función de distribución acumulada (inverso de función de cuantiles)
dist_perm <- ecdf(valores_ref$diferencia)
# Calculamos el percentil del valor observado
percentil_obs <- dist_perm(dif_obs)
percentil_obs
g_1 <- ggplot(valores_ref, aes(sample = diferencia)) + geom_qq(distribution = stats::qunif)  +
xlab("f") + ylab("diferencia") + labs(subtitle = "Distribución nula o de referencia") +
geom_hline(yintercept = dif_obs, colour = "red") +
annotate("text", x = 0.18, y = dif_obs + 0.13, label = "diferencia observada", colour = "red")
g_2 <- ggplot(valores_ref, aes(x = diferencia)) + geom_histogram(binwidth = 0.28) +
coord_flip() + xlab("") + labs(subtitle = " ") +
geom_vline(xintercept = dif_obs, colour = "red") +
annotate("text", x = dif_obs, y = 385, label = percentil_obs,vjust = -0.2, colour = "red")
g_1 + g_2
# Pivoteamos para tener un dataframe que podamos gráficar.
zolmitriptan <- zolmitriptan_raw |> pivot_longer(cols = c(starts_with("HR")), names_prefix = "HR",  names_to = "hora", values_to =  "concentracion") |>
mutate(hora = as.numeric(hora)/10,
formulation = if_else(formulation=="T", "Prueba", "Referencia"))
ggplot(zolmitriptan, aes(x = hora, y = concentracion, group = formulation, colour = formulation)) +
geom_line() +
labs(title="Concentración de Zolmitriptano en la sangre para diversos individuos",x="Tiempo transcurrido desde la toma de la dosis (horas)", y ="Zolmitriptano (mCG/ml)") +
theme(panel.spacing = unit(0.1, "lines")) +
theme_bw(base_size = 15) +
theme(strip.text = element_text(size = 12)) +
facet_wrap(~subj, ncol = 6, scales="free")
auc <- zolmitriptan |>
select(subj, formulation, hora, concentracion) |>
group_by(subj, formulation) |>
mutate(hora_base = hora - lag(hora),
concentracion_altura = (concentracion+lag(concentracion))/2,
base_altura = hora_base*concentracion_altura) |>
summarize(auc= sum(base_altura, na.rm=TRUE))
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
) |>
ungroup()
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
tab_header(title = "Área bajo la curva para las pruebas de bioequivalencia de una nueva formulación de Zolmitriptan") |>
cols_label(Sujeto = "Sujeto",
Prueba = "Formulación de Prueba",
Referencia = "Formulación de Referencia") |>
tab_style(style = cell_borders(sides = "all",
color = "gray",
weight = px(1)),
locations = cells_body()) |>
cols_align(align = "center",
columns = everything()) |>
cols_width(everything() ~ px(150)) |>
tab_options(table.width = pct(100),
table.font.size = px(14))
zol2 <- read_csv("./datos/zolmitriptan.csv", show_col_types = FALSE)
theta <- zol2 |>
summarize(mu_auc = sum(AUC)/n(),
mu_cmax = sum(CMAX)/n(),
mu_tmax = sum(TMAX)/n(),
.by = Formulation) |>
pivot_wider(names_from = "Formulation", values_from = c("mu_auc", "mu_cmax", "mu_tmax")) |>
mutate(theta_auc = mu_auc_T/mu_auc_R,
theta_cmax = mu_cmax_T/mu_cmax_R,
theta_tmax = mu_tmax_T/mu_tmax_R)
sprintf("Estimador plug-in de AUC (Área bajo la curva): %1.3f", theta$theta_auc)
sprintf("Estimador plug-in de CMAX (Concentración máxima): %1.3f", theta$theta_cmax)
sprintf("Estimador plug-in de TMAX (Tiempo en que se alcanzó la máxima concentración): %1.3f", theta$theta_tmax)
set.seed(123)
dist_boot <- map_df(1:5000,
~slice_sample(zol2, prop = 1, replace = TRUE, by = Formulation) |>
summarize(mu_auc = sum(AUC)/n(),
mu_cmax = sum(CMAX)/n(),
mu_tmax = sum(TMAX)/n(),
.by = Formulation) |>
pivot_wider(names_from = "Formulation", values_from = c("mu_auc", "mu_cmax", "mu_tmax")) |>
mutate(theta_auc = mu_auc_T/mu_auc_R,
theta_cmax = mu_cmax_T/mu_cmax_R,
theta_tmax = mu_tmax_T/mu_tmax_R) |>
select(theta_auc, theta_cmax, theta_tmax) |>
mutate(iter=.x)
)
dist_boot_auc  <- ggplot(dist_boot, aes(x=theta_auc)) + geom_histogram(bins = 50)  + labs(title="Dist. bootstrap de estimador de razón de AUC", x = "Estimador de razón - AUC", y = "Conteo")
dist_boot_cmax <- ggplot(dist_boot, aes(x=theta_cmax)) + geom_histogram(bins = 50) + labs(title="Dist. bootstrap de estimador de razón de CMAX", x = "Estimador de razón - CMAX", y = "Conteo")
dist_boot_tmax <- ggplot(dist_boot, aes(x=theta_tmax)) + geom_histogram(bins = 50) + labs(title="Dist. bootstrap de estimador de razón de TMAX", x = "Estimador de razón - TMAX", y = "Conteo")
qq_auc <- ggplot(dist_boot, aes(sample=theta_auc))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de AUC", y="Dist. Empírica", x="Dist. Teórica")
qq_cmax <- ggplot(dist_boot, aes(sample=theta_cmax))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de CMAX", y="Dist. Empírica", x="Dist. Teórica")
qq_tmax <- ggplot(dist_boot, aes(sample=theta_cmax))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de TMAX", y="Dist. Empírica", x="Dist. Teórica")
(dist_boot_auc + dist_boot_cmax + dist_boot_tmax) / (qq_auc + qq_cmax +qq_tmax)
# AUC
print("----AUC")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de AUC usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_auc, probs = c(0.05))),
unname(quantile(dist_boot$theta_auc, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de AUC el método normal: (%1.5f , %1.5f)",
theta$theta_auc - 1.645*sd(dist_boot$theta_auc),
theta$theta_auc + 1.645*sd(dist_boot$theta_auc)
)
print("El intervalo de confianza bootstrap del estimador de razón de AUC se encuentra dentro de los requerimientos de la FDA")
print("----CMAX")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de CMAX usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_cmax, probs = c(0.05))),
unname(quantile(dist_boot$theta_cmax, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de CMAX el método normal: (%1.5f , %1.5f)",
theta$theta_cmax - 1.645*sd(dist_boot$theta_cmax),
theta$theta_cmax + 1.645*sd(dist_boot$theta_cmax)
)
print("El intervalo de confianza bootstrap del estimador de razón de CMAX se encuentra dentro de los requerimientos de la FDA")
print("----TMAX")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de TMAX usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_tmax, probs = c(0.05))),
unname(quantile(dist_boot$theta_tmax, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de TMAX el método normal: (%1.5f , %1.5f)",
theta$theta_tmax - 1.645*sd(dist_boot$theta_tmax),
theta$theta_tmax + 1.645*sd(dist_boot$theta_tmax)
)
print("El intervalo de confianza bootstrap del estimador de razón de TMAX se encuentra dentro de los requerimientos de la FDA")
set.seed(123)
dic_endutih <- read_csv("./datos/endutih/diccionario_de_datos_tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
tr_endutih <- read_csv("./datos/endutih/tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
# Transformamos tibble a tbl_svy
endutih_design <- tr_endutih |>
select(UPM, FAC_HOG, EST_DIS, P4_4, P4_1_6, P5_5, ENT) |>
mutate(con_internet = if_else(P4_4==1,1,0),
con_movil    = if_else(P4_1_6==1,1,0),
con_fijo     = if_else(P5_5==1,1,0)) |>
select(UPM, FAC_HOG, EST_DIS, ENT, con_internet, con_movil, con_fijo) |>
as_survey_design(ids = UPM, weights = FAC_HOG, strata = EST_DIS)
# Calculamos el error muestral bootstrap
endutih_boot <- endutih_design %>%
as_survey_rep(type = "subbootstrap", replicates = 500)
# Intervalo de confianza
metricas <- endutih_boot %>%
srvyr::summarise(prop_internet = survey_mean(con_internet),
prop_movil    = survey_mean(con_movil),
prop_fijo    = survey_mean(con_fijo))
sprintf("Estimador puntual de la proporción de hogares con acceso a internet: %1.5f", metricas$prop_internet)
sprintf("Estimador puntual de la proporción de hogares con teléfono fijo: %1.5f", metricas$prop_fijo)
sprintf("Estimador puntual de la proporción de hogares con teléfono móvil: %1.5f", metricas$prop_movil)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con acceso a internet: (%1.5f, %1.5f)",
metricas$prop_internet-2*metricas$prop_internet_se,
metricas$prop_internet+2*metricas$prop_internet_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono fijo: (%1.5f, %1.5f)",
metricas$prop_fijo-2*metricas$prop_fijo_se,
metricas$prop_fijo+2*metricas$prop_fijo_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono móvil: (%1.5f, %1.5f)",
metricas$prop_movil-2*metricas$prop_movil_se,
metricas$prop_movil+2*metricas$prop_movil_se)
estado_internet <- endutih_boot %>%
group_by(ENT) %>%
srvyr::summarise(prop_internet = survey_mean(con_internet)) |>
mutate(inf = prop_internet - 2* prop_internet_se,
sup = prop_internet + 2* prop_internet_se)
estados <- read_delim("./datos/estados.txt", show_col_types = FALSE)
estado_internet_2 <- left_join(estado_internet, estados, by="ENT") |>select(nombre, inf, sup, prop_internet)
ggplot(estado_internet_2, aes(x = prop_internet, y = factor(nombre, levels = sort(nombre)), xmax = sup, xmin = inf)) +
geom_point(colour = "firebrick") +
geom_linerange() +
geom_hline(yintercept = 0, colour = "gray") +
labs(title="Proporción de hogares en cada estado con acceso a internet",
x="Proporción de hogares con acceso a internet",
y="Estado")
