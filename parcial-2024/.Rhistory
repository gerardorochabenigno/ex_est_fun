sprintf("Intervalo del 90%% de confianza del estimador de rázon de CMAX el método normal: (%1.5f , %1.5f)",
theta$theta_tmax - 1.645*sd(dist_boot$theta_tmax),
theta$theta_tmax + 1.645*sd(dist_boot$theta_tmax)
)
print("El intervalo de confianza bootstrap del estimador de razón de CMAX con los requerimientos de la FDA")
# AUC
print("----AUC")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de AUC usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_auc, probs = c(0.05))),
unname(quantile(dist_boot$theta_auc, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de AUC el método normal: (%1.5f , %1.5f)",
theta$theta_auc - 1.645*sd(dist_boot$theta_auc),
theta$theta_auc + 1.645*sd(dist_boot$theta_auc)
)
print("El intervalo de confianza bootstrap del estimador de razón de AUC se encuentra dentro de los requerimientos de la FDA")
print("----CMAX")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de CMAX usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_cmax, probs = c(0.05))),
unname(quantile(dist_boot$theta_cmax, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de CMAX el método normal: (%1.5f , %1.5f)",
theta$theta_cmax - 1.645*sd(dist_boot$theta_cmax),
theta$theta_cmax + 1.645*sd(dist_boot$theta_cmax)
)
print("El intervalo de confianza bootstrap del estimador de razón de CMAX se encuentra dentro de los requerimientos de la FDA")
print("----TMAX")
sprintf("Intervalo del 90%% de confianza del estimador de rázon de TMAX usando el método de percentiles: (%1.5f , %1.5f)",
unname(quantile(dist_boot$theta_tmax, probs = c(0.05))),
unname(quantile(dist_boot$theta_tmax, probs = c(0.95)))
)
# La dist. normal acumula el 90% de la distribución en aproximadamente 1.645 la desviación estándar alrededor de la media
sprintf("Intervalo del 90%% de confianza del estimador de rázon de TMAX el método normal: (%1.5f , %1.5f)",
theta$theta_tmax - 1.645*sd(dist_boot$theta_tmax),
theta$theta_tmax + 1.645*sd(dist_boot$theta_tmax)
)
print("El intervalo de confianza bootstrap del estimador de razón de TMAX se encuentra dentro de los requerimientos de la FDA")
dic_endutih <- read_csv(".\\datos\\endutih\\diccionario_de_datos_tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
tr_endutih <- read_csv(".\\datos\\endutih\\tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
# Transformamos tibble a tbl_svy
endutih_design <- tr_endutih |>
select(UPM, FAC_HOG, EST_DIS, P4_4, P4_1_6, P5_5, ENT) |>
mutate(con_internet = if_else(P4_4==1,1,0),
con_movil    = if_else(P4_1_6==1,1,0),
con_fijo     = if_else(P5_5==1,1,0)) |>
select(UPM, FAC_HOG, EST_DIS, ENT, con_internet, con_movil, con_fijo) |>
as_survey_design(ids = UPM, weights = FAC_HOG, strata = EST_DIS)
dic_endutih <- read_csv("./datos/endutih/diccionario_de_datos_tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
tr_endutih <- read_csv(".\\datos\\endutih\\tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
# Transformamos tibble a tbl_svy
endutih_design <- tr_endutih |>
select(UPM, FAC_HOG, EST_DIS, P4_4, P4_1_6, P5_5, ENT) |>
mutate(con_internet = if_else(P4_4==1,1,0),
con_movil    = if_else(P4_1_6==1,1,0),
con_fijo     = if_else(P5_5==1,1,0)) |>
select(UPM, FAC_HOG, EST_DIS, ENT, con_internet, con_movil, con_fijo) |>
as_survey_design(ids = UPM, weights = FAC_HOG, strata = EST_DIS)
dic_endutih <- read_csv("./datos/endutih/diccionario_de_datos_tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
tr_endutih <- read_csv("./datos/endutih/tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
# Transformamos tibble a tbl_svy
endutih_design <- tr_endutih |>
select(UPM, FAC_HOG, EST_DIS, P4_4, P4_1_6, P5_5, ENT) |>
mutate(con_internet = if_else(P4_4==1,1,0),
con_movil    = if_else(P4_1_6==1,1,0),
con_fijo     = if_else(P5_5==1,1,0)) |>
select(UPM, FAC_HOG, EST_DIS, ENT, con_internet, con_movil, con_fijo) |>
as_survey_design(ids = UPM, weights = FAC_HOG, strata = EST_DIS)
install.packages("survyr")
install.packages("srvyr")
install.packages("srvyr")
library(srvyr)
dic_endutih <- read_csv("./datos/endutih/diccionario_de_datos_tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
tr_endutih <- read_csv("./datos/endutih/tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
# Transformamos tibble a tbl_svy
endutih_design <- tr_endutih |>
select(UPM, FAC_HOG, EST_DIS, P4_4, P4_1_6, P5_5, ENT) |>
mutate(con_internet = if_else(P4_4==1,1,0),
con_movil    = if_else(P4_1_6==1,1,0),
con_fijo     = if_else(P5_5==1,1,0)) |>
select(UPM, FAC_HOG, EST_DIS, ENT, con_internet, con_movil, con_fijo) |>
as_survey_design(ids = UPM, weights = FAC_HOG, strata = EST_DIS)
# Calculamos el error muestral bootstrap
endutih_boot <- endutih_design %>%
as_survey_rep(type = "subbootstrap", replicates = 500)
library(srvyr)
set.seed(123)
dic_endutih <- read_csv("./datos/endutih/diccionario_de_datos_tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
tr_endutih <- read_csv("./datos/endutih/tr_endutih_hogares_anual_2023.csv", show_col_types = FALSE)
# Transformamos tibble a tbl_svy
endutih_design <- tr_endutih |>
select(UPM, FAC_HOG, EST_DIS, P4_4, P4_1_6, P5_5, ENT) |>
mutate(con_internet = if_else(P4_4==1,1,0),
con_movil    = if_else(P4_1_6==1,1,0),
con_fijo     = if_else(P5_5==1,1,0)) |>
select(UPM, FAC_HOG, EST_DIS, ENT, con_internet, con_movil, con_fijo) |>
as_survey_design(ids = UPM, weights = FAC_HOG, strata = EST_DIS)
# Calculamos el error muestral bootstrap
endutih_boot <- endutih_design %>%
as_survey_rep(type = "subbootstrap", replicates = 500)
# Intervalo de confianza
metricas <- endutih_boot %>%
srvyr::summarise(prop_internet = survey_mean(con_internet),
prop_movil    = survey_mean(con_movil),
prop_fijo.    = survey_mean(con_fijo))
sprintf("Estimador puntual de la proporción de hogares con acceso a internet: %1.5f", metricas$prop_internet)
sprintf("Estimador puntual de la proporción de hogares con teléfono fijo: %1.5f", metricas$prop_fijo)
sprintf("Estimador puntual de la proporción de hogares con teléfono móvil: %1.5f", metricas$prop_movil)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con acceso a internet: (%1.5f, %1.5f)",
metricas$prop_internet-2*metricas$prop_internet_se,
metricas$prop_internet+2*metricas$prop_internet_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono fijo: (%1.5f, %1.5f)",
metricas$prop_movil-2*metricas$prop_fijo_se,
metricas$prop_movil+2*metricas$prop_fijo_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono móvil: (%1.5f, %1.5f)",
metricas$prop_movil-2*metricas$prop_movil_se,
metricas$prop_movil+2*metricas$prop_movil_se)
# Intervalo de confianza
metricas <- endutih_boot %>%
srvyr::summarise(prop_internet = survey_mean(con_internet),
prop_movil    = survey_mean(con_movil),
prop_fijo    = survey_mean(con_fijo))
sprintf("Estimador puntual de la proporción de hogares con acceso a internet: %1.5f", metricas$prop_internet)
sprintf("Estimador puntual de la proporción de hogares con teléfono fijo: %1.5f", metricas$prop_fijo)
sprintf("Estimador puntual de la proporción de hogares con teléfono móvil: %1.5f", metricas$prop_movil)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con acceso a internet: (%1.5f, %1.5f)",
metricas$prop_internet-2*metricas$prop_internet_se,
metricas$prop_internet+2*metricas$prop_internet_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono fijo: (%1.5f, %1.5f)",
metricas$prop_movil-2*metricas$prop_fijo_se,
metricas$prop_movil+2*metricas$prop_fijo_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono móvil: (%1.5f, %1.5f)",
metricas$prop_movil-2*metricas$prop_movil_se,
metricas$prop_movil+2*metricas$prop_movil_se)
# Intervalo de confianza
metricas <- endutih_boot %>%
srvyr::summarise(prop_internet = survey_mean(con_internet),
prop_movil    = survey_mean(con_movil),
prop_fijo    = survey_mean(con_fijo))
sprintf("Estimador puntual de la proporción de hogares con acceso a internet: %1.5f", metricas$prop_internet)
sprintf("Estimador puntual de la proporción de hogares con teléfono fijo: %1.5f", metricas$prop_fijo)
sprintf("Estimador puntual de la proporción de hogares con teléfono móvil: %1.5f", metricas$prop_movil)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con acceso a internet: (%1.5f, %1.5f)",
metricas$prop_internet-2*metricas$prop_internet_se,
metricas$prop_internet+2*metricas$prop_internet_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono fijo: (%1.5f, %1.5f)",
metricas$prop_fijo-2*metricas$prop_fijo_se,
metricas$prop_fijo+2*metricas$prop_fijo_se)
sprintf("Intervalo del 95%% de confianza de la proporciòn de hogares con teléfono móvil: (%1.5f, %1.5f)",
metricas$prop_movil-2*metricas$prop_movil_se,
metricas$prop_movil+2*metricas$prop_movil_se)
estado_internet <- endutih_boot %>%
group_by(ENT) %>%
srvyr::summarise(prop_internet = survey_mean(con_internet)) |>
mutate(inf = prop_internet - 2* prop_internet_se,
sup = prop_internet + 2* prop_internet_se)
estados <- read_delim("./datos/estados.txt", show_col_types = FALSE)
estado_internet_2 <- left_join(estado_internet, estados, by="ENT") |>select(nombre, inf, sup, prop_internet)
estado_internet_2
ggplot(estado_internet_2, aes(x = prop_internet, y = factor(nombre, levels = sort(nombre)), xmax = sup, xmin = inf)) +
geom_point(colour = "red") +
geom_linerange() +
geom_hline(yintercept = 0, colour = "gray") +
labs(title="Proporción de hogares en cada estado con acceso a internet",
x="Proporción de hogares con acceso a internet",
y="Estado")
estado_internet_2 |> arrange(prop_internet)
estado_internet_2 |> arrange(-prop_internet)
estado_internet <- endutih_boot %>%
group_by(ENT) %>%
srvyr::summarise(prop_internet = survey_mean(con_internet)) |>
mutate(inf = prop_internet - 2* prop_internet_se,
sup = prop_internet + 2* prop_internet_se)
estados <- read_delim("./datos/estados.txt", show_col_types = FALSE)
estado_internet_2 <- left_join(estado_internet, estados, by="ENT") |>select(nombre, inf, sup, prop_internet)
ggplot(estado_internet_2, aes(x = prop_internet, y = factor(nombre, levels = sort(nombre)), xmax = sup, xmin = inf)) +
geom_point(colour = "red") +
geom_linerange() +
geom_hline(yintercept = 0, colour = "gray") +
labs(title="Proporción de hogares en cada estado con acceso a internet",
x="Proporción de hogares con acceso a internet",
y="Estado")
estado_internet_2 |> arrange(prop_internet)
library(gt)
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
)
aux %>%
select(Sujeto, Prueba, Referencia) %>%
gt() %>%
cols_label(
Sujeto = "Sujeto",
Prueba = "Área bajo la curva (Prueba)",
Referencia = "Área bajo la curva (Referencia)"
) %>%
tab_style(
style = cell_borders(
sides = "all",
color = "gray",
weight = px(1)
),
locations = cells_body()
) %>%
cols_align(
align = "center",
columns = everything()
) %>%
cols_width(
everything() ~ px(150)
) %>%
tab_options(
table.width = pct(100),
table.font.size = px(14)
)
library(gt)
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
)
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
cols_label(
Sujeto = "Sujeto",
Prueba = "Área bajo la curva (Prueba)",
Referencia = "Área bajo la curva (Referencia)"
) |>
tab_style(
style = cell_borders(
sides = "all",
color = "gray",
weight = px(1)
),
locations = cells_body()
) |>
cols_align(
align = "center",
columns = everything()
) |>
cols_width(
everything() ~ px(150)
) |>
tab_options(
table.width = pct(100),
table.font.size = px(14)
)
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
)
library(gt)
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
)
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
cols_label(
Sujeto = "Sujeto",
Prueba = "Área bajo la curva (Prueba)",
Referencia = "Área bajo la curva (Referencia)"
) |>
tab_style(
style = cell_borders(
sides = "all",
color = "gray",
weight = px(1)
),
locations = cells_body()
) |>
cols_align(
align = "center",
columns = everything()
) |>
cols_width(
everything() ~ px(150)
) |>
tab_options(
table.width = pct(100),
table.font.size = px(14)
)
aux
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
) |>
ungroup()
library(gt)
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
) |>
ungroup()
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
cols_label(
Sujeto = "Sujeto",
Prueba = "Área bajo la curva (Prueba)",
Referencia = "Área bajo la curva (Referencia)"
) |>
tab_style(
style = cell_borders(
sides = "all",
color = "gray",
weight = px(1)
),
locations = cells_body()
) |>
cols_align(
align = "center",
columns = everything()
) |>
cols_width(
everything() ~ px(150)
) |>
tab_options(
table.width = pct(100),
table.font.size = px(14)
)
library(gt)
auc <- zolmitriptan |>
select(subj, formulation, hora, concentracion) |>
group_by(subj, formulation) |>
mutate(hora_base = hora - lag(hora),
concentracion_altura = (concentracion+lag(concentracion))/2,
base_altura = hora_base*concentracion_altura) |>
summarize(auc= sum(base_altura, na.rm=TRUE))
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
) |>
ungroup()
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
cols_label(
Sujeto = "Sujeto",
Prueba = "Área bajo la curva (Prueba)",
Referencia = "Área bajo la curva (Referencia)"
) |>
tab_style(
style = cell_borders(
sides = "all",
color = "gray",
weight = px(1)
),
locations = cells_body()
) |>
cols_align(
align = "center",
columns = everything()
) |>
cols_width(
everything() ~ px(150)
) |>
tab_options(
table.width = pct(100),
table.font.size = px(14)
)
library(gt)
auc <- zolmitriptan |>
select(subj, formulation, hora, concentracion) |>
group_by(subj, formulation) |>
mutate(hora_base = hora - lag(hora),
concentracion_altura = (concentracion+lag(concentracion))/2,
base_altura = hora_base*concentracion_altura) |>
summarize(auc= sum(base_altura, na.rm=TRUE))
aux <- auc |>
pivot_wider(names_from = "formulation", values_from = "auc") |>
arrange(subj) |>
mutate(Sujeto = as.character(subj),
Prueba = as.character(round(Prueba,1)),
Prueba = replace_na(Prueba, "N/A"),
Referencia = as.character(round(Referencia,1)),
Referencia = replace_na(Referencia, "N/A")
) |>
ungroup()
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
cols_label(
Sujeto = "Sujeto",
Prueba = "Área bajo la curva (Prueba)",
Referencia = "Área bajo la curva (Referencia)"
) |>
tab_style(
style = cell_borders(
sides = "all",
color = "gray",
weight = px(1)
),
locations = cells_body()
) |>
cols_align(
align = "center",
columns = everything()
) |>
cols_width(
everything() ~ px(150)
) |>
tab_options(
table.width = pct(100),
table.font.size = px(14)
)
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
cols_label(Sujeto = "Sujeto",
Prueba = "Área bajo la curva (Prueba)",
Referencia = "Área bajo la curva (Referencia)") |>
tab_style(style = cell_borders(sides = "all",
color = "gray",
weight = px(1)),
locations = cells_body()) |>
cols_align(align = "center",
columns = everything()) |>
cols_width(everything() ~ px(150)) |>
tab_options(table.width = pct(100),
table.font.size = px(14))
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
tab_header(title = "Área bajo la curva para las pruebas de bioequivalencia de dos formulaciones de Zolmitriptan") |>
cols_label(Sujeto = "Sujeto",
Prueba = "Formulación de Prueba",
Referencia = "Formulación de Referencia") |>
tab_style(style = cell_borders(sides = "all",
color = "gray",
weight = px(1)),
locations = cells_body()) |>
cols_align(align = "center",
columns = everything()) |>
cols_width(everything() ~ px(150)) |>
tab_options(table.width = pct(100),
table.font.size = px(14))
estado_internet <- endutih_boot %>%
group_by(ENT) %>%
srvyr::summarise(prop_internet = survey_mean(con_internet)) |>
mutate(inf = prop_internet - 2* prop_internet_se,
sup = prop_internet + 2* prop_internet_se)
estados <- read_delim("./datos/estados.txt", show_col_types = FALSE)
estado_internet_2 <- left_join(estado_internet, estados, by="ENT") |>select(nombre, inf, sup, prop_internet)
ggplot(estado_internet_2, aes(x = prop_internet, y = factor(nombre, levels = sort(nombre)), xmax = sup, xmin = inf)) +
geom_point(colour = "firebrick") +
geom_linerange() +
geom_hline(yintercept = 0, colour = "gray") +
labs(title="Proporción de hogares en cada estado con acceso a internet",
x="Proporción de hogares con acceso a internet",
y="Estado")
library(patchwork)
dist_boot_auc  <- ggplot(dist_boot, aes(x=theta_auc)) + geom_histogram(bins = 50)  + labs(title="Dist. bootstrap de estimador de razón de AUC", x = "Estimador de razón - AUC", y = "Conteo")
dist_boot_cmax <- ggplot(dist_boot, aes(x=theta_cmax)) + geom_histogram(bins = 50) + labs(title="Dist. bootstrap de estimador de razón de CMAX", x = "Estimador de razón - CMAX", y = "Conteo")
dist_boot_tmax <- ggplot(dist_boot, aes(x=theta_tmax)) + geom_histogram(bins = 50) + labs(title="Dist. bootstrap de estimador de razón de TMAX", x = "Estimador de razón - TMAX", y = "Conteo")
qq_auc <- ggplot(dist_boot, aes(sample=theta_auc))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de AUC", y="Dist. Empírica", x="Dist. Teórica")
qq_cmax <- ggplot(dist_boot, aes(sample=theta_cmax))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de CMAX", y="Dist. Empírica", x="Dist. Teórica")
qq_tmax <- ggplot(dist_boot, aes(sample=theta_cmax))+ stat_qq() + stat_qq_line() +labs(title="QQ de estimador de razón de TMAX", y="Dist. Empírica", x="Dist. Teórica")
(dist_boot_auc + dist_boot_cmax + dist_boot_tmax) / (qq_auc + qq_cmax +qq_tmax)
aux |>
select(Sujeto, Prueba, Referencia) |>
gt() |>
tab_header(title = "Área bajo la curva para las pruebas de bioequivalencia de una nueva formulación de Zolmitriptan") |>
cols_label(Sujeto = "Sujeto",
Prueba = "Formulación de Prueba",
Referencia = "Formulación de Referencia") |>
tab_style(style = cell_borders(sides = "all",
color = "gray",
weight = px(1)),
locations = cells_body()) |>
cols_align(align = "center",
columns = everything()) |>
cols_width(everything() ~ px(150)) |>
tab_options(table.width = pct(100),
table.font.size = px(14))
